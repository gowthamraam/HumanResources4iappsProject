package xxhlp.oracle.apps.xxhlp.recruit.server;

import java.sql.SQLException;
import java.sql.Types;
import oracle.apps.fnd.framework.server.OAViewObjectImpl;
import oracle.jbo.domain.Date;
import java.util.ArrayList;
import java.util.List;
import oracle.apps.fnd.framework.OAException;
import oracle.jbo.Row;
import oracle.apps.fnd.framework.OAViewObject;
import oracle.apps.fnd.framework.server.OAApplicationModuleImpl;
import oracle.apps.fnd.framework.server.OADBTransaction;
import oracle.jbo.Transaction;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jdbc.OracleCallableStatement;
import xxhlp.oracle.apps.xxhlp.CommonClass;
import xxhlp.oracle.apps.xxhlp.recruit.poplist.server.appnameLVOImpl;
import xxhlp.oracle.apps.xxhlp.recruit.poplist.server.apprefnumLVOImpl;
import xxhlp.oracle.apps.xxhlp.recruit.poplist.server.appstatusLVOImpl;
import xxhlp.oracle.apps.xxhlp.recruit.poplist.server.appstsLVOImpl;
import xxhlp.oracle.apps.xxhlp.recruit.poplist.server.commodeLVOImpl;
import xxhlp.oracle.apps.xxhlp.recruit.poplist.server.countryLVOImpl;
import xxhlp.oracle.apps.xxhlp.recruit.poplist.server.eduLVOImpl;
import xxhlp.oracle.apps.xxhlp.recruit.poplist.server.educolLVOImpl;
import xxhlp.oracle.apps.xxhlp.recruit.poplist.server.edusubLVOImpl;
import xxhlp.oracle.apps.xxhlp.recruit.poplist.server.edutypeLVOImpl;
import xxhlp.oracle.apps.xxhlp.recruit.poplist.server.empLVOImpl;
import xxhlp.oracle.apps.xxhlp.recruit.poplist.server.exptypeLVOImpl;
import xxhlp.oracle.apps.xxhlp.recruit.poplist.server.genderLVOImpl;
import xxhlp.oracle.apps.xxhlp.recruit.poplist.server.intresLVOImpl;
import xxhlp.oracle.apps.xxhlp.recruit.poplist.server.intstsLVOImpl;
import xxhlp.oracle.apps.xxhlp.recruit.poplist.server.inttypeLVOImpl;
import xxhlp.oracle.apps.xxhlp.recruit.poplist.server.posapplLVOImpl;
import xxhlp.oracle.apps.xxhlp.recruit.poplist.server.regionLVOImpl;
import xxhlp.oracle.apps.xxhlp.recruit.poplist.server.repoptLVOImpl;
import xxhlp.oracle.apps.xxhlp.recruit.poplist.server.yearLVOImpl;
import xxhlp.oracle.apps.xxhlp.recruit.poplist.server.yesnoLVOImpl;
import java.lang.Math;

import oracle.apps.fnd.framework.server.OADBTransactionImpl;
import oracle.apps.fnd.framework.server.OAViewDef;
import oracle.apps.fnd.framework.server.OAViewDefImpl;
import oracle.apps.fnd.framework.webui.OAPageContext;
import oracle.apps.fnd.framework.webui.beans.OAWebBean;
import oracle.apps.fnd.framework.webui.beans.message.OAMessageStyledTextBean;
import oracle.apps.fnd.framework.webui.beans.table.OATableBean;

import oracle.jbo.AttributeDef;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class applAMImpl extends OAApplicationModuleImpl {

    /**This is the default constructor (do not remove)
     */
    public applAMImpl() {
    }

    public void initQuery() {
        // initial query of Applicants in Search Screen
        int count = 0;
        StringBuffer whClause = new StringBuffer();
        List whClauseParams = new ArrayList();
        applVOImpl qaVO  = getQryApplVO() ;
        applFullVOImpl afVO  = getapplFullVO() ;

        System.out.println("AM - at initQuery"); 

        whClause.append(" 1 = 1"); 
        exeQuery(whClause, whClauseParams, qaVO) ;
        exeQuery(whClause, whClauseParams, afVO) ;
        //System.out.println("@AM initQuery afVO row count : " + afVO.getRowCount());
    } // end initQuery()

    // This method is called to Update an applicant details
    public void QryApplRow(String appid) {
        // Query Single Applicant for update
        int count = 0;
        StringBuffer whClause = new StringBuffer();
        List whClauseParams = new ArrayList();
        applVOImpl aVO  = getapplVO();
        eduVOImpl edVO  = geteduVO();
        expVOImpl exVO  = getexpVO();
        interVOImpl iVO = getinterVO();
        
        System.out.println("in AM QryApplRow appid " + appid); 
        
        whClause.append(" 1 = 1"); 
        if (appid != null && !"".equals(appid)) {       
          try
          {
            whClause.append(" and app_id = :" + ++count);
            whClauseParams.add(appid);
          }
          catch(Exception e){}
        }
        
        exeQuery(whClause, whClauseParams, aVO) ;
        exeQuery(whClause, whClauseParams, edVO) ;
        exeQuery(whClause, whClauseParams, exVO) ;
        exeQuery(whClause, whClauseParams, iVO) ;
        
        System.out.println("in AM after executeQuery");         
        
        System.out.println("in AM Set Enable / Disable fields");  
        /**
         *  Set Enable / Disable for Exp Year in Experience Region
         */
        String dtfm = null ;
        //System.out.println("@AM exVO row count : " + exVO.getRowCount());
        if (exVO.getRowCount() > 0) {
            exVO.first() ;
            while (exVO.getCurrentRow() != null ) {
                if (exVO.getCurrentRow().getAttribute("DateFrom") != null ) {
                    dtfm = exVO.getCurrentRow().getAttribute("DateFrom").toString();
                }
                else {
                    dtfm = null ;
                }
                //System.out.println("@AM dtfm : " + dtfm);
                setExpYear(exVO, dtfm) ;
                exVO.next() ;
            }
        }

        /**
         *  Set Enable / Disable for Mark Fields in Interview Region
         */
        String iflag = null ;
        System.out.println("iVO row count : " + iVO.getRowCount());
        if (iVO.getRowCount() > 0) {
            iVO.first() ;
            while (iVO.getCurrentRow() != null ) {
                if (iVO.getCurrentRow().getAttribute("IntType") != null ) {
                    iflag = iVO.getCurrentRow().getAttribute("IntType").toString();
                }
                else {
                    iflag = null ;
                }
                System.out.println("iflag : " + iflag);
                setInterviewMarks(iVO, iflag) ;
                iVO.next() ;
            }
        }
        
        
    } // end of QryApplRow()

    public void QryPanelRows(String appintid) {
        // Query Panel Details for update
        int count = 0;
        StringBuffer whClause = new StringBuffer();
        List whClauseParams = new ArrayList();
        panelVOImpl pVO = getpanelVO();
        
        whClause.append(" 1 = 1"); 
        if (appintid != null && !"".equals(appintid)) {       
          try
          {
            whClause.append(" and app_int_id = :" + ++count);
            whClauseParams.add(appintid);
          }
          catch(Exception e){}
        }

        exeQuery(whClause, whClauseParams, pVO) ;
        // System.out.println("Query is " + pVO.getQuery());
    }

   // Execute Query for given View Object with the given Where Clause
    public void exeQuery(StringBuffer whClause, List whClauseParams, OAViewObject pVO) 
    {
        // Now Set the Where Clause and Execute
        pVO.setWhereClause(null); // Clears the where clause 
        pVO.setWhereClauseParams(null); // Clears the where clause params
        pVO.setWhereClause(whClause.toString());
        int paramsSize = whClauseParams.size();
        for (int i=0; i<paramsSize; i++)
         {
            pVO.setWhereClauseParam(i, whClauseParams.get(i)); 
         }

        pVO.executeQuery();
        //System.out.println("exeQuery : Query : " + pVO.getQuery());
        //System.out.println("exeQuery : Row Count : " + pVO.getRowCount()); 
    } // end of exeQuery()

    // Query Applicants based on the Parameters
    public void queryApplicants(String qrefnum, String qidnum, String qcontactnum, String qappname, String qgender,
                                String qregion, String qcrfrom, String qcrto, 
                                String qrcvdfrom, String qrcvdto, String qagefrom, String qageto,
                                String qstatus,
                                String qmedyn, String qropyn, String qposappl,
                                String qemployed, String qempfrom, String qempto, String qedutype,
                                String qedu, String qsubject,String qyearfm,String qyearto,
                                String qexptype,String qposition,String qcompany,String qexpyearfm,
                                String qexpyearto,String qintyn,String qintfm,String qintto,
                                String qresult,String qmarksfm,String qmarksto,String qintby ) {
        int count = 0;
        StringBuffer whClause = new StringBuffer();
        List whClauseParams = new ArrayList();
        applVOImpl qaVO  = getQryApplVO() ;
        applFullVOImpl afVO  = getapplFullVO() ;
       
        whClause.append(" 1 = 1"); 
        if (qrefnum != null && !"".equals(qrefnum)) {       
          try
          {
            whClause.append(" and app_ref_number like :" + ++count);
            whClauseParams.add(qrefnum);
          }
          catch(Exception e){}
        }
        if (qidnum != null && !"".equals(qidnum)) {
        try
          {
            whClause.append(" and id_number like :" + ++count);
            whClauseParams.add(qidnum);
          }
          catch(Exception e){}
        }

        if (qcontactnum != null && !"".equals(qcontactnum)) {
        try
          {
            whClause.append(" and contact_number like :" + ++count);
            whClauseParams.add(qcontactnum);
          }
          catch(Exception e){}
        }

        if (qappname != null && !"".equals(qappname)) { 
        try
          {
            whClause.append(" and app_name like :" + ++count);
            whClauseParams.add(qappname);
          }
          catch(Exception e){}
        }

        if (qgender != null && !"".equals(qgender)) {  
        try
          {
            whClause.append(" and gender = :" + ++count);
            whClauseParams.add(qgender);
          }
          catch(Exception e){}
        }

        if (qregion != null && !"".equals(qregion)) { 
        try
          {
            whClause.append(" and region = :" + ++count);
            whClauseParams.add(qregion);
          }
          catch(Exception e){}
        }

        System.out.println("where builder qcrfrom : " + qcrfrom + " & qcrto : " +qcrto );
        if (qcrfrom != null && !"".equals(qcrfrom) && qcrto != null && !"".equals(qcrto)) {
          try
          {
            whClause.append(" and trunc(creation_date) between  :" + ++count +" and :" + ++count);
            whClauseParams.add(qcrfrom);
            whClauseParams.add(qcrto);
          }
          catch (Exception e) {}
        }
        else {
           // if (qcrfrom != null && !"".equals(qcrfrom) && qcrto.equals(null)) {
           if (qcrfrom != null && !"".equals(qcrfrom) && (qcrto.equals(null) || "".equals(qcrto))) {
              try
              {
                whClause.append(" and trunc(creation_date) = :" + ++count);
                whClauseParams.add(qcrfrom);
              }
              catch (Exception e) {}
            }
        }

        System.out.println("where builder qrcvdfrom : " + qrcvdfrom + " & qrcvdto : " +qrcvdto );
        if (qrcvdfrom != null && !"".equals(qrcvdfrom) && qrcvdto != null && !"".equals(qrcvdto)) {
          try
          {
            whClause.append(" and trunc(cv_received_on) between  :" + ++count +" and :" + ++count);
            whClauseParams.add(qrcvdfrom);
            whClauseParams.add(qrcvdto);
          }
          catch (Exception e) {}
        }
        else {
            // if (qrcvdfrom != null && !"".equals(qrcvdfrom) && qrcvdto.equals(null)) {
             if (qrcvdfrom != null && !"".equals(qrcvdfrom) && (qrcvdto.equals(null) || "".equals(qrcvdto))) {
              try
              {
                whClause.append(" and trunc(cv_received_on) = :" + ++count);
                whClauseParams.add(qrcvdfrom);
              }
              catch (Exception e) {}
            }
        }

        System.out.println("where builder qagefrom : " + qagefrom + " & qageto : " +qageto );
        if (qagefrom != null && !"".equals(qagefrom) && qageto != null && !"".equals(qageto)) {
          try
          {
            whClause.append(" and age between  :" + ++count +" and :" + ++count);
            whClauseParams.add(qagefrom);
            whClauseParams.add(qageto);
          }
          catch (Exception e) {}
        }
        else {
            // if (qagefrom != null && !"".equals(qagefrom) && qageto.equals(null)) {
             if (qagefrom != null && !"".equals(qagefrom) && (qageto.equals(null) || "".equals(qageto) )) {
              try
              {
                whClause.append(" and age = :" + ++count);
                whClauseParams.add(qagefrom);
              }
              catch (Exception e) {}
            }
        }

        if (qropyn != null && !"".equals(qropyn)) { 
        try
          {
            whClause.append(" and rop_conduct_cert_yn = :" + ++count);
            whClauseParams.add(qropyn);
          }
          catch(Exception e){}
        }

        if (qmedyn != null && !"".equals(qmedyn)) { 
        try
          {
            whClause.append(" and medical_done_yn = :" + ++count);
            whClauseParams.add(qmedyn);
          }
          catch(Exception e){}
        }

        /** below field has been removed
        if (qposappl != null && !"".equals(qposappl)) { 
        try
          {
            whClause.append(" and position_app_for = :" + ++count);
            whClauseParams.add(qposappl);
          }
          catch(Exception e){}
        }
        */

        if (qstatus != null && !"".equals(qstatus)) { 
        try
          {
            whClause.append(" and app_status = :" + ++count);
            whClauseParams.add(qstatus);
          }
          catch(Exception e){}
        }

        if (qemployed != null && !"".equals(qemployed)) { 
        try
          {
            if (qemployed.equals("Y")) {
                whClause.append(" and person_id is not null");
            }
            else {
                whClause.append(" and person_id is null");
            }
          }
          catch(Exception e){}
        }        

         if (qempfrom != null && !"".equals(qempfrom) && qempto != null && !"".equals(qempto)) {
           try
           {
             whClause.append(" and employed_on between  :" + ++count +" and :" + ++count);
             whClauseParams.add(qempfrom);
             whClauseParams.add(qempto);
           }
           catch (Exception e) {}
         }
         else {
             // if (qempfrom != null && !"".equals(qempfrom) && qempto.equals(null)) {
              if (qempfrom != null && !"".equals(qempfrom) && (qempto.equals(null) || "".equals(qempto))) {
               try
               {
                 whClause.append(" and employed_on = :" + ++count);
                 whClauseParams.add(qempfrom);
               }
               catch (Exception e) {}
             }
         }
         
        if (qedutype != null && !"".equals(qedutype)) { 
            try
              {
                whClause.append(" and app_id in (select app_id from xxhlp_app_educations where education_type = :" + ++count + ")" );
                whClauseParams.add(qedutype);
              }
              catch(Exception e){}
        }

        if (qedu != null && !"".equals(qedu)) { 
            try
              {
                whClause.append(" and app_id in (select app_id from xxhlp_app_educations where education in ( " + qedu + "))" );
                //whClauseParams.add(qedu);
              }
              catch(Exception e){}
        }

        if (qsubject != null && !"".equals(qsubject)) { 
            try
              {
                whClause.append(" and app_id in (select app_id from xxhlp_app_educations where major_subject in ( " + qsubject + "))" );
                // whClauseParams.add(qsubject);
              }
              catch(Exception e){}
        }
        
        if (qyearfm != null && !"".equals(qyearfm) && qyearto != null && !"".equals(qyearto)) {
          try
          {
            whClause.append(" and app_id in (select app_id from xxhlp_app_educations where year_completed between  :" + ++count +" and :" + ++count + ")" );
            whClauseParams.add(qyearfm);
            whClauseParams.add(qyearto);
          }
          catch (Exception e) {}
        }
        else {
            // if (qyearfm != null && !"".equals(qyearfm) && qyearto.equals(null)) {
             if (qyearfm != null && !"".equals(qyearfm) && (qyearto.equals(null) || "".equals(qyearto))) {
              try
              {
                whClause.append(" and app_id in (select app_id from xxhlp_app_educations where year_completed = :" + ++count + ")" );
                whClauseParams.add(qyearfm);
              }
              catch (Exception e) {}
            }
        }

         if (qexptype != null && !"".equals(qexptype)) {
         try
           {
             whClause.append(" and app_id in (select app_id from xxhlp_app_employments where exp_type in ( " + qexptype + "))" );
             // whClauseParams.add(qexptype);
           }
           catch(Exception e){}
         }

         if (qposition != null && !"".equals(qposition)) {
         try
           {
             whClause.append(" and app_id in (select app_id from xxhlp_app_employments where position_held like :" + ++count + ")" );
             whClauseParams.add(qposition);
           }
           catch(Exception e){}
         }

        if (qcompany != null && !"".equals(qcompany)) {
        try
          {
            whClause.append(" and app_id in (select app_id from xxhlp_app_employments where company_name like :" + ++count + ")" );
            whClauseParams.add(qcompany);
          }
          catch(Exception e){}
        }

        if (qexpyearfm != null && !"".equals(qexpyearfm) && qexpyearto != null && !"".equals(qexpyearto)) {
          try
          {
            whClause.append(" and app_id in (select app_id from xxhlp_app_employments group by app_id having (sum(date_upto - date_from) / 365) between  :" + ++count +" and :" + ++count + ")" );
            whClauseParams.add(qexpyearfm);
            whClauseParams.add(qexpyearto);
          }
          catch (Exception e) {}
        }
        else {
           // if (qexpyearfm != null && !"".equals(qexpyearfm) && qexpyearto.equals(null)) {
            if (qexpyearfm != null && !"".equals(qexpyearfm) && (qexpyearto.equals(null) || "".equals(qexpyearto)) ) {
              try
              {
                whClause.append(" and app_id in (select app_id from xxhlp_app_employments group by app_id having (sum(date_upto - date_from) / 365) = :" + ++count + ")" );
                whClauseParams.add(qexpyearfm);
              }
              catch (Exception e) {}
            }
        }

        if (qintyn != null && !"".equals(qintyn)) { 
           try
           {  
                if (qintyn.equals("T"))    {  whClause.append(" and tested = 'Y' ");  }
                if (qintyn.equals("NT"))   {  whClause.append(" and tested = 'N' ");  }
                if (qintyn.equals("I"))    {  whClause.append(" and interviewed = 'Y' "); }
                if (qintyn.equals("NI"))   {  whClause.append(" and interviewed = 'N' "); }
                if (qintyn.equals("TI"))   {  whClause.append(" and tested = 'Y' and interviewed = 'Y' "); }
                if (qintyn.equals("TNI"))  {  whClause.append(" and tested = 'Y' and interviewed = 'N' "); }
                if (qintyn.equals("NTNI")) {  whClause.append(" and tested = 'N' and interviewed = 'N' "); }
           }
           catch(Exception e){}
        } 

        if (qintfm != null && !"".equals(qintfm) && qintto != null && !"".equals(qintto)) {
          try
          {
            whClause.append(" and app_id in (select app_id from xxhlp_app_interviews where int_date between  :" + ++count +" and :" + ++count + ")" );
            whClauseParams.add(qintfm);
            whClauseParams.add(qintto);
          }
          catch (Exception e) {}
        }
        else {
            if (qintfm != null && !"".equals(qintfm) && (qintto.equals(null) || "".equals(qintto)) ) {
              try
              {
                whClause.append(" and app_id in (select app_id from xxhlp_app_interviews where int_date = :" + ++count + ")" );
                whClauseParams.add(qintfm);
              }
              catch (Exception e) {}
            }
        }

        if (qresult != null && !"".equals(qresult)) {
        try
          {
            whClause.append(" and app_id in (select app_id from xxhlp_app_interviews where result = :" + ++count + ")" );
            whClauseParams.add(qresult);
          }
          catch(Exception e){}
        }

        if (qmarksfm != null && !"".equals(qmarksfm) && qmarksto != null && !"".equals(qmarksto)) {
          try
          {
            whClause.append(" and app_id in (select app_id from xxhlp_app_interviews where total_marks between  :" + ++count +" and :" + ++count + ")" );
            whClauseParams.add(qmarksfm);
            whClauseParams.add(qmarksto);
          }
          catch (Exception e) {}
        }
        else {
            if (qmarksfm != null && !"".equals(qmarksfm) && (qmarksto.equals(null) || "".equals(qmarksto)) ) {
              try
              {
                whClause.append(" and app_id in (select app_id from xxhlp_app_interviews where total_marks = :" + ++count + ")" );
                whClauseParams.add(qmarksfm);
              }
              catch (Exception e) {}
            }
        }

        if (qintby != null && !"".equals(qintby)) {
        try
          {
            whClause.append(" and app_id in (select app_id from xxhlp_app_interviews where app_int_id in (select app_int_id from xxhlp_app_int_panels where person_name like :" + ++count + "))" );
            whClauseParams.add(qintby);
          }
          catch(Exception e){}
        }

       System.out.println("Where Clause ==> " + whClause);
      
        /**
         *  Now Set the Where Clause and Execute 
         */
        exeQuery(whClause, whClauseParams, qaVO) ;

        /**
         *  Below is queried for Export into Excel
         */        
        exeQuery(whClause, whClauseParams, afVO) ;
       // System.out.println("AM queryApplicants - afVO row count : " + afVO.getRowCount());

         
    } // end queryApplicants()
    
    // Creating a row in a given View Object
    // Also initialize with the Key Value
    public void addrows(OAViewObject pVO, String EventName, String appid, String appintid) {
        applVOImpl aVO  = getapplVO();
        interVOImpl iVO = getinterVO();

        System.out.println("in AM addrows method");         
        
        Row row = pVO.createRow();
        row.setNewRowState(row.STATUS_INITIALIZED);
        pVO.setMaxFetchSize(0);
        pVO.last() ; 
        pVO.next(); 
        pVO.insertRow(row);        

        //System.out.println("in AM addrows method : row created");         
        pVO.last() ;
        if(EventName.equalsIgnoreCase("PR")) {
            row.setAttribute("AppId", getSequenceValue("XXHLP_APP_ID_S"));
            OADBTransaction txn=(OADBTransaction)getOADBTransaction();
            Date currDate=(Date)txn.getCurrentDBDate();
            row.setAttribute("CvReceivedOn", currDate) ;
            row.setAttribute("AppRefNumber", 0) ;
            //System.out.println("in AM addrows method : " + EventName);         
        }

        if(EventName.equalsIgnoreCase("AddEduBut")) {
            row.setAttribute("AppEduId", getSequenceValue("XXHLP_APP_EDU_ID_S"));
            row.setAttribute("AppId", appid ) ; //aVO.getCurrentRow().getAttribute("AppId"));
            //System.out.println("in AM addrows method : " + EventName);         
        }
        
        if(EventName.equalsIgnoreCase("AddExpBut")) {
            row.setAttribute("AppEmpId", getSequenceValue("XXHLP_APP_EMP_ID_S"));
            row.setAttribute("AppId", appid ) ; //aVO.getCurrentRow().getAttribute("AppId"));
            //System.out.println("in AM addrows method : " + EventName);         
        }

        if(EventName.equalsIgnoreCase("AddInterBut")) {
            row.setAttribute("AppIntId", getSequenceValue("XXHLP_APP_INT_ID_S"));
            row.setAttribute("AppId", appid ) ; //aVO.getCurrentRow().getAttribute("AppId"));
            //System.out.println("in AM addrows method : " + EventName);         
        }

        if(EventName.equalsIgnoreCase("AddPanelBut")) {
            row.setAttribute("IntPanelId", getSequenceValue("XXHLP_INT_PANEL_ID_S"));
            row.setAttribute("AppId", appid ) ; //aVO.getCurrentRow().getAttribute("AppId"));
            row.setAttribute("AppIntId", appintid ) ; //iVO.getCurrentRow().getAttribute("AppIntId"));
            //System.out.println("in AM addrows method : " + EventName);         
        }

    } // end of addrows()

     public void deleteApplicant(String delFrom, String pkId) {
         applVOImpl qaVO  = getQryApplVO() ;
         eduVOImpl  edVO  = geteduVO();
         expVOImpl  exVO  = getexpVO();
         interVOImpl iVO = getinterVO();
         panelVOImpl pVO = getpanelVO();

        StringBuffer whClause = new StringBuffer();
        List whClauseParams = new ArrayList();
        
       System.out.println("at deleteApplicant "); 
       if (pkId != null && !"".equals(pkId)) {       
            whClause.append(" 1 = 1"); 

            if (delFrom.equals("APPLICANT")) {
               whClause.append(" and app_id = :1");
               whClauseParams.add(pkId);
               exeQuery(whClause, whClauseParams, edVO) ;
               exeQuery(whClause, whClauseParams, exVO) ;
               exeQuery(whClause, whClauseParams, iVO) ;
               exeQuery(whClause, whClauseParams, pVO) ;
    
               deleterows(pVO, pkId, "AppId");
               deleterows(iVO, pkId, "AppId");
               deleterows(exVO, pkId, "AppId");
               deleterows(edVO, pkId, "AppId");
               deleterows(qaVO, pkId, "AppId");
               System.out.println("at deleteApplicant - after requery APPLICANT"); 
            }
            if (delFrom.equals("EDUCATION")) {
                whClause.append(" and app_edu_id = :1");
                whClauseParams.add(pkId);
                exeQuery(whClause, whClauseParams, edVO) ;
                deleterows(edVO, pkId, "AppEduId");
                System.out.println("at deleteApplicant - after requery EDUCATION"); 
            }
            if (delFrom.equals("EXPERIENCE")) {
                whClause.append(" and app_emp_id = :1");
                whClauseParams.add(pkId);
                exeQuery(whClause, whClauseParams, exVO) ;
                deleterows(exVO, pkId, "AppEmpId");
                System.out.println("at deleteApplicant - after requery EXPERIENCE"); 
            }
            if (delFrom.equals("INTERVIEW")) {
                /** delete Panels first, and then Interview Details **/
                whClause.append(" and app_int_id = :1");
                whClauseParams.add(pkId);
                exeQuery(whClause, whClauseParams, iVO) ;
                exeQuery(whClause, whClauseParams, pVO) ;
                deleterows(pVO, pkId, "AppIntId");
                deleterows(iVO, pkId, "AppIntId");
                System.out.println("at deleteApplicant - after requery INTERVIEW"); 
            }
            if (delFrom.equals("INT_PANEL")) {
                whClause.append(" and int_panel_id = :1");
                whClauseParams.add(pkId);
                exeQuery(whClause, whClauseParams, pVO) ;
                deleterows(pVO, pkId, "IntPanelId");
                System.out.println("at deleteApplicant - after requery INT_PANEL"); 
            }
      /** Save the changes **/
       saveBut() ;
      }
   } // deleteApplicant()

    public void deleterows(OAViewObject pVO, String pkId, String pkAttr) {

        pVO.first();
        while (pVO.getCurrentRow() != null) {
          if (pVO.getCurrentRow().getAttribute(pkAttr).equals(pkId)) {
              pVO.removeCurrentRow();
           }
          pVO.next();
        }
    }
    
    public void deleteApplicant_old(String delFrom, String pkId) {
        applVOImpl qaVO  = getQryApplVO() ;
        eduVOImpl  edVO  = geteduVO();
        expVOImpl  exVO  = getexpVO();
        interVOImpl iVO = getinterVO();
        panelVOImpl pVO = getpanelVO();

        System.out.println("at deleteApplicant "); 

        String errcode = "0" ;
        String errmsg  = "" ;
        String callStr = "{ call XXHLP_RECRUITMENT_PKG.DELETE_APPLICANT(:1, :2, :3, :4) }";
        try{
            OracleCallableStatement cs = (OracleCallableStatement)getOADBTransaction().createCallableStatement(callStr, 1);
            cs.setString(1, delFrom);
            cs.setString(2, pkId);
            cs.registerOutParameter(3, Types.VARCHAR);
            cs.registerOutParameter(4, Types.VARCHAR);
            cs.execute();
            
            errcode = cs.getString(3) ;
            errmsg  = cs.getString(4) ;
            cs.close();
        } 
        catch (SQLException sqle){
                 throw OAException.wrapperException(sqle);
        }
        catch (OAException e){
                 throw OAException.wrapperException(e);
        }    
        if (!errcode.equals("0")) {
            throw new OAException (errmsg, OAException.ERROR);
        }

       // System.out.println("at deleteApplicant - after deleting"); 

        // requery the changes
         if (delFrom.equals("APPLICANT")) {
             qaVO.executeQuery(); 
             //System.out.println("at deleteApplicant - after requery APPLICANT"); 
         }
            if (delFrom.equals("EDUCATION")) {
                edVO.executeQuery();
                //System.out.println("at deleteApplicant - after requery EDUCATION"); 
            }
            if (delFrom.equals("EXPERIENCE")) {
                exVO.executeQuery(); 
                //System.out.println("at deleteApplicant - after requery EXPERIENCE"); 
            }
            if (delFrom.equals("INTERVIEW")) {
                iVO.executeQuery(); 
                //System.out.println("at deleteApplicant - after requery INTERVIEW"); 
            }
            if (delFrom.equals("INT_PANEL")) {
                pVO.executeQuery(); 
                //System.out.println("at deleteApplicant - after requery INT_PANEL"); 
            }
    } // deleteApplicant()

   /** Calculate Total Marks
    */
    public void calcMarks(Row row) {
        CommonClass cc = new CommonClass() ;

        int tmarks = Integer.parseInt(cc.nvl(row.getAttribute("EnglishMarks"), 0).toString()) + 
                     Integer.parseInt(cc.nvl(row.getAttribute("EssayMarks"), 0).toString()) + 
                     Integer.parseInt(cc.nvl(row.getAttribute("NumericalMarks"), 0).toString()) ;
        // System.out.println("Total Marks " + tmarks);
        row.setAttribute("TotalMarks", tmarks);
    }
    
    /** Calculate Experience Years
     */
     public void calcExperience(Row row) {
         CommonClass cc = new CommonClass() ;
         expVORowImpl expR = (expVORowImpl) row ;
         OADBTransaction txn=(OADBTransaction)getOADBTransaction();
         //Date sysDate =  (Date) txn.getCurrentDBDate().dateValue();
         //Date fmdt = (Date) expR.getDateFrom().dateValue();
         //Date todt = (Date) expR.getDateUpto().dateValue();
         float ey = (float) 0.00; 
         double ey1 = 0.0 ;
         if (expR.getDateFrom() != null) {
            ey = cc.daysBetween(expR.getDateFrom().dateValue(), cc.nvl(expR.getDateUpto(),txn.getCurrentDBDate()).dateValue());
            ey1 = Math.round( ey / 365.0 * Math.pow(10,2)) / Math.pow(10,2) ;  
         }
         // System.out.println("calcExperience Exp Years : " + ey1 );
         row.setAttribute("ExpYears", ey1);
     }
     
    public void saveBut() {
        applVOImpl aVO  = getapplVO();
        
        if (aVO.getCurrentRow() != null) {
           String Ref_Num = aVO.getCurrentRow().getAttribute("AppRefNumber").toString() ;
           //System.out.println("Ref_Num @ saveBut : " + Ref_Num );
           if(Ref_Num.equals("0")){
              aVO.getCurrentRow().setAttribute("AppRefNumber", getSeqNum());
           }   
        }
        getOADBTransaction().commit();       
    } // end saveBut()

    public void cancelBut() {
        Transaction txn = getTransaction();
        
        if (txn.isDirty()) {
           txn.rollback();
        }
        
        // getOADBTransaction().rollback();
    } // end cancelBut()

    public String getSeqNum(){
      String rno = null ;
      String callStr = "{ call XXHLP_COMMON_PKG.GET_SEQUENCE_NUMBER(:1,:2) }";
      try{
          OracleCallableStatement callable = (OracleCallableStatement)getOADBTransaction().createCallableStatement(callStr, 1);
          callable.setString(1, "RECRUITMENT");
          callable.registerOutParameter(2, Types.VARCHAR);
          callable.execute();
          rno = callable.getString(2);
          callable.close();
          System.out.println("Sequence generated @ getSeqNum : " + rno);
      } 
      catch (SQLException sqle){
               throw OAException.wrapperException(sqle);
      }
      catch (OAException e){
               throw OAException.wrapperException(e);
      }    
      return rno ;
    } // end getSeqNum()
    
    
    public void setEnableDisable(OAViewObjectImpl tVO, String role, String readonly) {
    
       tVO.executeQuery();
       tVO.first();
       
       if(tVO.getCurrentRow()!=null) {
         System.out.println("@AM setEnableDisable " + role);
         if (role.equals("ADMIN")) {

            if (readonly.equals("N")) {
                tVO.getCurrentRow().setAttribute("DisableYes", Boolean.FALSE);
                tVO.getCurrentRow().setAttribute("RenderYes", Boolean.TRUE);
            }
            else {
                tVO.getCurrentRow().setAttribute("DisableYes", Boolean.TRUE);
                tVO.getCurrentRow().setAttribute("RenderYes", Boolean.FALSE);
            }

             // tVO.getCurrentRow().setAttribute("InterviewYes", Boolean.FALSE);
             // tVO.getCurrentRow().setAttribute("InterviewNo", Boolean.FALSE);
         }
         else {
             tVO.getCurrentRow().setAttribute("DisableYes", Boolean.TRUE);
             tVO.getCurrentRow().setAttribute("RenderYes", Boolean.FALSE);
             // tVO.getCurrentRow().setAttribute("InterviewYes", Boolean.TRUE);
             // tVO.getCurrentRow().setAttribute("InterviewNo", Boolean.TRUE);
         }
       }
    }  // end of setEnableDisable

    public void setExpYear(OAViewObjectImpl tVO, String dtfm) {
    
        //System.out.println("@AM setExpYear ");
        if(tVO.getCurrentRow() != null) {
          if (dtfm != null && !"".equals(dtfm)) {
             //System.out.println("@AM setExpYear disable year");
             tVO.getCurrentRow().setAttribute("ExpYear", Boolean.TRUE);
          }
          else {
             //System.out.println("@AM setExpYear enable year");
             tVO.getCurrentRow().setAttribute("ExpYear", Boolean.FALSE);
          }
        }
    }

     public void setInterviewMarks(OAViewObjectImpl tVO, String intFlag) {
     
        System.out.println("@AM setInterviewMarks  Int Flag: " + intFlag);
        if(tVO.getCurrentRow()!=null) {
              if (intFlag.equals("INT")) {
                 //System.out.println("@AM setInterviewMarks INT");
                  tVO.getCurrentRow().setAttribute("Marks", Boolean.TRUE);
                  tVO.getCurrentRow().setAttribute("TotalMark", Boolean.FALSE);
              }
              else {
                  //System.out.println("@AM setInterviewMarks TEST");
                  tVO.getCurrentRow().setAttribute("Marks", Boolean.FALSE);
                  tVO.getCurrentRow().setAttribute("TotalMark", Boolean.TRUE);
              }
        }
     }  // end of setInterviewMarks

     /**
     * Create Employee in Oracle HR 
     */
      public void createEmployee(String appid) {
          String errcode = "0" ;
          String errmsg  = "" ;
          String callStr = "{ call XXHLP_RECRUITMENT_PKG.CREATE_EMPLOYEE(:1, :2, :3) }";
          try{
              OracleCallableStatement cs = (OracleCallableStatement)getOADBTransaction().createCallableStatement(callStr, 1);
              cs.setString(1, appid);
              cs.registerOutParameter(2, Types.VARCHAR);
              cs.registerOutParameter(3, Types.VARCHAR);
              cs.execute();
              
              errcode = cs.getString(2) ;
              errmsg  = cs.getString(3) ;
              cs.close();
          } 
          catch (SQLException sqle){
                   throw OAException.wrapperException(sqle);
          }
          catch (OAException e){
                   throw OAException.wrapperException(e);
          }    
          if (!errcode.equals("0")) {
              throw new OAException (errmsg, OAException.ERROR);
          }
      } // end of createEmployee()
      
    /** Start Report **/ 
    public void startReport(OAPageContext pageContext, String crdtfm, String crdtto, String rdtfm, String rdtto,
                            String g1, String g2, String g3, String g4, String mexp ) {

        System.out.println("@AM startReport ");            

            CommonClass cc = new CommonClass();
            String Sql = ""  ;
            String Col1 = ""  ;
            String Col2 = ""  ;
            String Col3 = ""  ;
            String Col4 = ""  ;
            String Col1Attr = ""  ;
            String Col2Attr = ""  ;
            String Col3Attr = ""  ;
            String Col4Attr = ""  ;
            String Col1Hdr = ""  ;
            String Col2Hdr = ""  ;
            String Col3Hdr = ""  ;
            String Col4Hdr = ""  ;
            String GrpColumns = "" ;
            String whClause = ""  ;
            String attrList[] = new String[5];
            String attrHdr[]  = new String[5];
                 
            /** build Group Columns   REG  EDU   CRD   RCD  **/
             if (g1 != null && !"".equals(g1)) {
                 if ("REG".equals(g1)) {   Col1 = "region_desc" ; Col1Attr = "RegionDesc" ; Col1Hdr = "Region" ; }
                 if ("EDU".equals(g1)) {   Col1 = "education" ; Col1Attr = "Education" ; Col1Hdr = "Education" ;  }
                 if ("CRD".equals(g1)) {   Col1 = "to_char(creation_date,'DD-MON-RRRR')" ; Col1Attr = "CreationDate" ; Col1Hdr = "Created On" ;  }
                 if ("RCD".equals(g1)) {   Col1 = "to_char(cv_received_on,'DD-MON-RRRR')" ; Col1Attr = "CvReceivedOn" ; Col1Hdr = "Received On" ;  }
                 
                 GrpColumns = GrpColumns + Col1 ;
             }

            if (g2 != null && !"".equals(g2)) {
                if ("REG".equals(g2)) {   Col2 = "region_desc" ; Col2Attr = "RegionDesc" ; Col2Hdr = "Region" ;  }
                if ("EDU".equals(g2)) {   Col2 = "education" ; Col2Attr = "Education" ; Col2Hdr = "Education" ;  }
                if ("CRD".equals(g2)) {   Col2 = "to_char(creation_date,'DD-MON-RRRR')" ; Col2Attr = "CreationDate" ; Col2Hdr = "Created On" ;  }
                if ("RCD".equals(g2)) {   Col2 = "to_char(cv_received_on,'DD-MON-RRRR')" ; Col2Attr = "CvReceivedOn" ; Col2Hdr = "Received On" ; }

                GrpColumns = GrpColumns + ", " + Col2 ;
            }
            if (g3 != null && !"".equals(g3)) {
                if ("REG".equals(g3)) {   Col3 = "region_desc" ; Col3Attr = "RegionDesc" ; Col3Hdr = "Region" ;  }
                if ("EDU".equals(g3)) {   Col3 = "education" ; Col3Attr = "Education" ; Col3Hdr = "Education" ;  }
                if ("CRD".equals(g3)) {   Col3 = "to_char(creation_date,'DD-MON-RRRR')" ; Col3Attr = "CreationDate" ; Col3Hdr = "Created On" ;  }
                if ("RCD".equals(g3)) {   Col3 = "to_char(cv_received_on,'DD-MON-RRRR')" ; Col3Attr = "CvReceivedOn" ; Col3Hdr = "Received On" ; }

                GrpColumns = GrpColumns + ", " + Col3 ;
            }
            if (g4 != null && !"".equals(g4)) {
                if ("REG".equals(g4)) {   Col4 = "region_desc" ; Col4Attr = "RegionDesc" ;  Col4Hdr = "Region" ; }
                if ("EDU".equals(g4)) {   Col4 = "education" ; Col4Attr = "Education" ; Col4Hdr = "Education" ;  }
                if ("CRD".equals(g4)) {   Col4 = "to_char(creation_date,'DD-MON-RRRR')" ; Col4Attr = "CreationDate" ; Col4Hdr = "Created On" ;  }
                if ("RCD".equals(g4)) {   Col4 = "to_char(cv_received_on,'DD-MON-RRRR')" ; Col4Attr = "CvReceivedOn" ; Col4Hdr = "Received On" ; }

                GrpColumns = GrpColumns + ", " + Col4 ;
            }
            
            /** build Where Clause **/
            whClause = "where 1 = 1"; 
            if (crdtfm != null && !"".equals(crdtfm) && crdtto != null && !"".equals(crdtto)) {
                whClause = whClause + " and trunc(creation_date) between  '" + crdtfm + "' and '" + crdtto + "'" ;
            }
            else {
                if (crdtfm != null && !"".equals(crdtfm) && (crdtto.equals(null) || "".equals(crdtto))) {
                    whClause = whClause + " and trunc(creation_date) = '" + crdtfm + "'" ;
                }
            }
            
            if (rdtfm != null && !"".equals(rdtfm) && rdtto != null && !"".equals(rdtto)) {
                whClause = whClause + " and trunc(cv_received_on) between  '" + rdtfm + "' and '" + rdtto + "'" ;
            }
            else {
                if (rdtfm != null && !"".equals(rdtfm) && (rdtto.equals(null) || "".equals(rdtto)) ) {
                    whClause = whClause + " and trunc(cv_received_on) = '" + rdtfm + "'" ;
                }
            }
            
            if (mexp != null && !"".equals(mexp) ) {
                whClause = whClause + " and total_exp_years >= " + mexp ;
            }

           /** Build SQL Statement **/
           if (GrpColumns != null && !"".equals(GrpColumns) ) {
              Sql = "select " + GrpColumns + " , count(app_id) Count from xxhlp_applicants_full_v " + whClause + " group by " + GrpColumns ;
           }
           else {
              Sql = "select count(app_id) from xxhlp_applicants_full_v " + whClause ;
           }

        System.out.println("Sql ==> " + Sql);

         OADBTransactionImpl dbTx = (OADBTransactionImpl) getTransaction(); 
         OAViewDef viewDef = dbTx.createViewDef();  
         viewDef.setSql(Sql); 
         viewDef.setExpertMode(true); 
         viewDef.setViewObjectClass("oracle.apps.fnd.framework.server.OAViewObjectImpl"); 
         viewDef.setViewRowClass("oracle.apps.fnd.framework.server.OAViewRowImpl"); 
         int i=0;
         if (Col1 != null && !"".equals(Col1)) {
            viewDef.addSqlDerivedAttrDef(Col1Attr, Col1, "java.lang.String", Types.VARCHAR, true, true, AttributeDef.READONLY); 
            attrList[i]=Col1Attr; 
            attrHdr[i]=Col1Hdr; 
            ++i;
         }
         if (Col2 != null && !"".equals(Col2)) {
            viewDef.addSqlDerivedAttrDef(Col2Attr, Col2, "java.lang.String", Types.VARCHAR,  true, true, AttributeDef.READONLY);
            attrList[i]=Col2Attr;    
            attrHdr[i]=Col2Hdr; 
            ++i;
         }
         if (Col3 != null && !"".equals(Col3)) {
            viewDef.addSqlDerivedAttrDef(Col3Attr, Col3, "java.lang.String", Types.VARCHAR,  true, true, AttributeDef.READONLY);
            attrList[i]=Col3Attr;    
            attrHdr[i]=Col3Hdr; 
            ++i;
         }
         if (Col4 != null && !"".equals(Col4)) {
            viewDef.addSqlDerivedAttrDef(Col4Attr, Col4, "java.lang.String", Types.VARCHAR,  true, true, AttributeDef.READONLY);
            attrList[i]=Col4Attr;    
            attrHdr[i]=Col4Hdr; 
            ++i;
         }
         viewDef.addSqlDerivedAttrDef("Count", "Count", "oracle.jbo.domain.Number", Types.NUMERIC, true, true, AttributeDef.READONLY); 
         attrList[i] = "Count" ;
         attrHdr[i]  = "Count" ;

         OAViewObject vo1 = (OAViewObject) this.findViewObject("ReportVO"); 
         //findViewObject("ReportVO"); 
        
         if (vo1 != null) { 
            vo1.remove(); 
         }  
         OAViewObject vo = (OAViewObject) this.createViewObject("ReportVO", viewDef);
         vo.executeQuery(); 
         System.out.println("Report Query :"+vo.getQuery());
         System.out.println("before Exporting");
         cc.export2Excel(pageContext, "ReportVO", "excelFile", "MAX", attrList, attrHdr) ;     
         System.out.println("after Exporting");    

    } // end of startReport() 

      
    /**Sample main for debugging Business Components code using the tester.
     */
    public static void main(String[] args) {
        launchTester("xxhlp.oracle.apps.xxhlp.recruit.server", /* package name */
      "applAMLocal" /* Configuration Name */);
    }

    /**Container's getter for eduVO
     */
    public eduVOImpl geteduVO() {
        return (eduVOImpl)findViewObject("eduVO");
    }


    /**Container's getter for expVO
     */
    public expVOImpl getexpVO() {
        return (expVOImpl)findViewObject("expVO");
    }


    /**Container's getter for appnameLVO
     */
    public appnameLVOImpl getappnameLVO() {
        return (appnameLVOImpl)findViewObject("appnameLVO");
    }

    /**Container's getter for apprefnumLVO
     */
    public apprefnumLVOImpl getapprefnumLVO() {
        return (apprefnumLVOImpl)findViewObject("apprefnumLVO");
    }

    /**Container's getter for appstatusLVO
     */
    public appstatusLVOImpl getappstatusLVO() {
        return (appstatusLVOImpl)findViewObject("appstatusLVO");
    }

    /**Container's getter for genderLVO
     */
    public genderLVOImpl getgenderLVO() {
        return (genderLVOImpl)findViewObject("genderLVO");
    }

    /**Container's getter for regionLVO
     */
    public regionLVOImpl getregionLVO() {
        return (regionLVOImpl)findViewObject("regionLVO");
    }

    /**Container's getter for commodeLVO
     */
    public commodeLVOImpl getcommodeLVO() {
        return (commodeLVOImpl)findViewObject("commodeLVO");
    }

    /**Container's getter for appstsLVO
     */
    public appstsLVOImpl getappstsLVO() {
        return (appstsLVOImpl)findViewObject("appstsLVO");
    }

    /**Container's getter for countryLVO
     */
    public countryLVOImpl getcountryLVO() {
        return (countryLVOImpl)findViewObject("countryLVO");
    }

    /**Container's getter for yesnoLVO
     */
    public yesnoLVOImpl getyesnoLVO() {
        return (yesnoLVOImpl)findViewObject("yesnoLVO");
    }

    /**Container's getter for edusubLVO
     */
    public edusubLVOImpl getedusubLVO() {
        return (edusubLVOImpl)findViewObject("edusubLVO");
    }

    /**Container's getter for edutypeLVO
     */
    public edutypeLVOImpl getedutypeLVO() {
        return (edutypeLVOImpl)findViewObject("edutypeLVO");
    }

    /**Container's getter for educolLVO
     */
    public educolLVOImpl geteducolLVO() {
        return (educolLVOImpl)findViewObject("educolLVO");
    }

    /**Container's getter for eduLVO
     */
    public eduLVOImpl geteduLVO() {
        return (eduLVOImpl)findViewObject("eduLVO");
    }

    /**Container's getter for intresLVO
     */
    public intresLVOImpl getintresLVO() {
        return (intresLVOImpl)findViewObject("intresLVO");
    }

    /**Container's getter for inttypeLVO
     */
    public inttypeLVOImpl getinttypeLVO() {
        return (inttypeLVOImpl)findViewObject("inttypeLVO");
    }

    /**Container's getter for exptypeLVO
     */
    public exptypeLVOImpl getexptypeLVO() {
        return (exptypeLVOImpl)findViewObject("exptypeLVO");
    }


    /**Container's getter for interVO
     */
    public interVOImpl getinterVO() {
        return (interVOImpl)findViewObject("interVO");
    }

    /**Container's getter for panelVO1
     */
    public panelVOImpl getpanelVO1() {
        return (panelVOImpl)findViewObject("panelVO1");
    }

    /**Container's getter for panelVO
     */
    public panelVOImpl getpanelVO() {
        return (panelVOImpl)findViewObject("panelVO");
    }

    /**Container's getter for IntPanelVL1
     */
    public ViewLinkImpl getIntPanelVL1() {
        return (ViewLinkImpl)findViewLink("IntPanelVL1");
    }


    /**Container's getter for posapplLVO
     */
    public posapplLVOImpl getposapplLVO() {
        return (posapplLVOImpl)findViewObject("posapplLVO");
    }


    /**Container's getter for yearLVO
     */
    public yearLVOImpl getyearLVO() {
        return (yearLVOImpl)findViewObject("yearLVO");
    }

    /**Container's getter for TransientVO
     */
    public OAViewObjectImpl getTransientVO() {
        return (OAViewObjectImpl)findViewObject("TransientVO");
    }

    /**Container's getter for intstsLVO
     */
    public intstsLVOImpl getintstsLVO() {
        return (intstsLVOImpl)findViewObject("intstsLVO");
    }

    /**Container's getter for applVO
     */
    public applVOImpl getapplVO() {
        return (applVOImpl)findViewObject("applVO");
    }

    /**Container's getter for eduVO1
     */
    public eduVOImpl geteduVO1() {
        return (eduVOImpl)findViewObject("eduVO1");
    }

    /**Container's getter for expVO1
     */
    public expVOImpl getexpVO1() {
        return (expVOImpl)findViewObject("expVO1");
    }

    /**Container's getter for interVO1
     */
    public interVOImpl getinterVO1() {
        return (interVOImpl)findViewObject("interVO1");
    }

    /**Container's getter for QryApplVO
     */
    public applVOImpl getQryApplVO() {
        return (applVOImpl)findViewObject("QryApplVO");
    }

    /**Container's getter for ApplEduVL1
     */
    public ViewLinkImpl getApplEduVL1() {
        return (ViewLinkImpl)findViewLink("ApplEduVL1");
    }

    /**Container's getter for ApplExpVL1
     */
    public ViewLinkImpl getApplExpVL1() {
        return (ViewLinkImpl)findViewLink("ApplExpVL1");
    }

    /**Container's getter for ApplInterVL1
     */
    public ViewLinkImpl getApplInterVL1() {
        return (ViewLinkImpl)findViewLink("ApplInterVL1");
    }

    /**Container's getter for empLVO
     */
    public empLVOImpl getempLVO() {
        return (empLVOImpl)findViewObject("empLVO");
    }


    /**Container's getter for repoptLVO
     */
    public repoptLVOImpl getrepoptLVO() {
        return (repoptLVOImpl)findViewObject("repoptLVO");
    }

    /**Container's getter for applFullVO
     */
    public applFullVOImpl getapplFullVO() {
        return (applFullVOImpl)findViewObject("applFullVO");
    }
}
