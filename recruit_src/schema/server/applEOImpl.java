package xxhlp.oracle.apps.xxhlp.recruit.schema.server;


import com.sun.java.util.collections.ArrayList;

import java.sql.SQLException;
import java.sql.Types;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import oracle.apps.fnd.framework.OAAttrValException;
import oracle.apps.fnd.framework.OAException;
import oracle.apps.fnd.framework.server.OADBTransaction;
import oracle.apps.fnd.framework.server.OAEntityDefImpl;
import oracle.apps.fnd.framework.server.OAEntityImpl;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.TransactionEvent;

import oracle.jdbc.OracleCallableStatement;

import xxhlp.oracle.apps.xxhlp.CommonClass;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class applEOImpl extends OAEntityImpl {
    public static final int APPID = 0;
    public static final int APPREFNUMBER = 1;
    public static final int CVRECEIVEDON = 2;
    public static final int REFERREDBY = 3;
    public static final int REGION = 4;
    public static final int LASTNAME = 5;
    public static final int FIRSTNAME = 6;
    public static final int GENDER = 7;
    public static final int DATEOFBIRTH = 8;
    public static final int ADDRESS1 = 9;
    public static final int ADDRESS2 = 10;
    public static final int ADDRESS3 = 11;
    public static final int ADDRESS4 = 12;
    public static final int CITY = 13;
    public static final int COUNTRY = 14;
    public static final int EMAILID = 15;
    public static final int CONTACTNUMBER = 16;
    public static final int IDNUMBER = 17;
    public static final int APPSTATUS = 18;
    public static final int COMMSENT = 19;
    public static final int COMMMODE = 20;
    public static final int REMARKS = 21;
    public static final int ATTRIBUTECATEGORY = 22;
    public static final int ATTRIBUTE1 = 23;
    public static final int ATTRIBUTE2 = 24;
    public static final int ATTRIBUTE3 = 25;
    public static final int ATTRIBUTE4 = 26;
    public static final int ATTRIBUTE5 = 27;
    public static final int ATTRIBUTE6 = 28;
    public static final int ATTRIBUTE7 = 29;
    public static final int ATTRIBUTE8 = 30;
    public static final int ATTRIBUTE9 = 31;
    public static final int ATTRIBUTE10 = 32;
    public static final int ATTRIBUTE11 = 33;
    public static final int ATTRIBUTE12 = 34;
    public static final int ATTRIBUTE13 = 35;
    public static final int ATTRIBUTE14 = 36;
    public static final int ATTRIBUTE15 = 37;
    public static final int CREATEDBY = 38;
    public static final int CREATIONDATE = 39;
    public static final int LASTUPDATEDBY = 40;
    public static final int LASTUPDATEDATE = 41;
    public static final int LASTUPDATELOGIN = 42;
    public static final int IDEXPDATE = 43;
    public static final int POSITIONAPPFOR = 44;
    public static final int CURRSALARY = 45;
    public static final int EXPSALARY = 46;
    public static final int MEDICALDONEYN = 47;
    public static final int ROPCONDUCTCERTYN = 48;
    public static final int EMPLOYEENUMBER = 49;
    public static final int REFERREDBYNAME = 50;
    public static final int EDUEO = 51;
    public static final int EXPEO = 52;
    public static final int INTEREO = 53;
    public static final int PANELEO = 54;


    private static OAEntityDefImpl mDefinitionObject;

    /**This is the default constructor (do not remove)
     */
    public applEOImpl() {
    }


    /**Retrieves the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = 
                    (OAEntityDefImpl)EntityDefImpl.findDefObject("xxhlp.oracle.apps.xxhlp.recruit.schema.server.applEO");
        }
        return mDefinitionObject;
    }

    /**Gets the attribute value for AppId, using the alias name AppId
     */
    public Number getAppId() {
        return (Number)getAttributeInternal(APPID);
    }

    /**Sets <code>value</code> as the attribute value for AppId
     */
    public void setAppId(Number value) {
        setAttributeInternal(APPID, value);
    }

    /**Gets the attribute value for AppRefNumber, using the alias name AppRefNumber
     */
    public String getAppRefNumber() {
        return (String)getAttributeInternal(APPREFNUMBER);
    }

    /**Sets <code>value</code> as the attribute value for AppRefNumber
     */
    public void setAppRefNumber(String value) {
        setAttributeInternal(APPREFNUMBER, value);
    }

    /**Gets the attribute value for CvReceivedOn, using the alias name CvReceivedOn
     */
    public Date getCvReceivedOn() {
        return (Date)getAttributeInternal(CVRECEIVEDON);
    }

    /**Sets <code>value</code> as the attribute value for CvReceivedOn
     */
    public void setCvReceivedOn(Date value) {
        setAttributeInternal(CVRECEIVEDON, value);
    }

    /**Gets the attribute value for ReferredBy, using the alias name ReferredBy
     */
    public String getReferredBy() {
        return (String)getAttributeInternal(REFERREDBY);
    }

    /**Sets <code>value</code> as the attribute value for ReferredBy
     */
    public void setReferredBy(String value) {
        setAttributeInternal(REFERREDBY, value);
    }

    /**Gets the attribute value for Region, using the alias name Region
     */
    public String getRegion() {
        return (String)getAttributeInternal(REGION);
    }

    /**Sets <code>value</code> as the attribute value for Region
     */
    public void setRegion(String value) {
        setAttributeInternal(REGION, value);
    }

    /**Gets the attribute value for LastName, using the alias name LastName
     */
    public String getLastName() {
        return (String)getAttributeInternal(LASTNAME);
    }

    /**Sets <code>value</code> as the attribute value for LastName
     */
    public void setLastName(String value) {
        setAttributeInternal(LASTNAME, value);
    }

    /**Gets the attribute value for FirstName, using the alias name FirstName
     */
    public String getFirstName() {
        return (String)getAttributeInternal(FIRSTNAME);
    }

    /**Sets <code>value</code> as the attribute value for FirstName
     */
    public void setFirstName(String value) {
        setAttributeInternal(FIRSTNAME, value);
    }

    /**Gets the attribute value for Gender, using the alias name Gender
     */
    public String getGender() {
        return (String)getAttributeInternal(GENDER);
    }

    /**Sets <code>value</code> as the attribute value for Gender
     */
    public void setGender(String value) {
        setAttributeInternal(GENDER, value);
    }

    /**Gets the attribute value for DateOfBirth, using the alias name DateOfBirth
     */
    public Date getDateOfBirth() {
        return (Date)getAttributeInternal(DATEOFBIRTH);
    }

    /**Sets <code>value</code> as the attribute value for DateOfBirth
     */
    public void setDateOfBirth(Date value) {
        setAttributeInternal(DATEOFBIRTH, value);
    }

    /**Gets the attribute value for Address1, using the alias name Address1
     */
    public String getAddress1() {
        return (String)getAttributeInternal(ADDRESS1);
    }

    /**Sets <code>value</code> as the attribute value for Address1
     */
    public void setAddress1(String value) {
        setAttributeInternal(ADDRESS1, value);
    }

    /**Gets the attribute value for Address2, using the alias name Address2
     */
    public String getAddress2() {
        return (String)getAttributeInternal(ADDRESS2);
    }

    /**Sets <code>value</code> as the attribute value for Address2
     */
    public void setAddress2(String value) {
        setAttributeInternal(ADDRESS2, value);
    }

    /**Gets the attribute value for Address3, using the alias name Address3
     */
    public String getAddress3() {
        return (String)getAttributeInternal(ADDRESS3);
    }

    /**Sets <code>value</code> as the attribute value for Address3
     */
    public void setAddress3(String value) {
        setAttributeInternal(ADDRESS3, value);
    }

    /**Gets the attribute value for Address4, using the alias name Address4
     */
    public String getAddress4() {
        return (String)getAttributeInternal(ADDRESS4);
    }

    /**Sets <code>value</code> as the attribute value for Address4
     */
    public void setAddress4(String value) {
        setAttributeInternal(ADDRESS4, value);
    }

    /**Gets the attribute value for City, using the alias name City
     */
    public String getCity() {
        return (String)getAttributeInternal(CITY);
    }

    /**Sets <code>value</code> as the attribute value for City
     */
    public void setCity(String value) {
        setAttributeInternal(CITY, value);
    }

    /**Gets the attribute value for Country, using the alias name Country
     */
    public String getCountry() {
        return (String)getAttributeInternal(COUNTRY);
    }

    /**Sets <code>value</code> as the attribute value for Country
     */
    public void setCountry(String value) {
        setAttributeInternal(COUNTRY, value);
    }

    /**Gets the attribute value for EmailId, using the alias name EmailId
     */
    public String getEmailId() {
        return (String)getAttributeInternal(EMAILID);
    }

    /**Sets <code>value</code> as the attribute value for EmailId
     */
    public void setEmailId(String value) {
        setAttributeInternal(EMAILID, value);
    }

    /**Gets the attribute value for ContactNumber, using the alias name ContactNumber
     */
    public String getContactNumber() {
        return (String)getAttributeInternal(CONTACTNUMBER);
    }

    /**Sets <code>value</code> as the attribute value for ContactNumber
     */
    public void setContactNumber(String value) {
        setAttributeInternal(CONTACTNUMBER, value);
    }

    /**Gets the attribute value for IdNumber, using the alias name IdNumber
     */
    public String getIdNumber() {
        return (String)getAttributeInternal(IDNUMBER);
    }

    /**Sets <code>value</code> as the attribute value for IdNumber
     */
    public void setIdNumber(String value) {
        setAttributeInternal(IDNUMBER, value);
    }

    /**Gets the attribute value for AppStatus, using the alias name AppStatus
     */
    public String getAppStatus() {
        return (String)getAttributeInternal(APPSTATUS);
    }

    /**Sets <code>value</code> as the attribute value for AppStatus
     */
    public void setAppStatus(String value) {
        setAttributeInternal(APPSTATUS, value);
    }

    /**Gets the attribute value for CommSent, using the alias name CommSent
     */
    public String getCommSent() {
        return (String)getAttributeInternal(COMMSENT);
    }

    /**Sets <code>value</code> as the attribute value for CommSent
     */
    public void setCommSent(String value) {
        setAttributeInternal(COMMSENT, value);
    }

    /**Gets the attribute value for CommMode, using the alias name CommMode
     */
    public String getCommMode() {
        return (String)getAttributeInternal(COMMMODE);
    }

    /**Sets <code>value</code> as the attribute value for CommMode
     */
    public void setCommMode(String value) {
        setAttributeInternal(COMMMODE, value);
    }

    /**Gets the attribute value for Remarks, using the alias name Remarks
     */
    public String getRemarks() {
        return (String)getAttributeInternal(REMARKS);
    }

    /**Sets <code>value</code> as the attribute value for Remarks
     */
    public void setRemarks(String value) {
        setAttributeInternal(REMARKS, value);
    }


    /**Gets the attribute value for AttributeCategory, using the alias name AttributeCategory
     */
    public String getAttributeCategory() {
        return (String)getAttributeInternal(ATTRIBUTECATEGORY);
    }

    /**Sets <code>value</code> as the attribute value for AttributeCategory
     */
    public void setAttributeCategory(String value) {
        setAttributeInternal(ATTRIBUTECATEGORY, value);
    }

    /**Gets the attribute value for Attribute1, using the alias name Attribute1
     */
    public String getAttribute1() {
        return (String)getAttributeInternal(ATTRIBUTE1);
    }

    /**Sets <code>value</code> as the attribute value for Attribute1
     */
    public void setAttribute1(String value) {
        setAttributeInternal(ATTRIBUTE1, value);
    }

    /**Gets the attribute value for Attribute2, using the alias name Attribute2
     */
    public String getAttribute2() {
        return (String)getAttributeInternal(ATTRIBUTE2);
    }

    /**Sets <code>value</code> as the attribute value for Attribute2
     */
    public void setAttribute2(String value) {
        setAttributeInternal(ATTRIBUTE2, value);
    }

    /**Gets the attribute value for Attribute3, using the alias name Attribute3
     */
    public String getAttribute3() {
        return (String)getAttributeInternal(ATTRIBUTE3);
    }

    /**Sets <code>value</code> as the attribute value for Attribute3
     */
    public void setAttribute3(String value) {
        setAttributeInternal(ATTRIBUTE3, value);
    }

    /**Gets the attribute value for Attribute4, using the alias name Attribute4
     */
    public String getAttribute4() {
        return (String)getAttributeInternal(ATTRIBUTE4);
    }

    /**Sets <code>value</code> as the attribute value for Attribute4
     */
    public void setAttribute4(String value) {
        setAttributeInternal(ATTRIBUTE4, value);
    }

    /**Gets the attribute value for Attribute5, using the alias name Attribute5
     */
    public String getAttribute5() {
        return (String)getAttributeInternal(ATTRIBUTE5);
    }

    /**Sets <code>value</code> as the attribute value for Attribute5
     */
    public void setAttribute5(String value) {
        setAttributeInternal(ATTRIBUTE5, value);
    }

    /**Gets the attribute value for Attribute6, using the alias name Attribute6
     */
    public String getAttribute6() {
        return (String)getAttributeInternal(ATTRIBUTE6);
    }

    /**Sets <code>value</code> as the attribute value for Attribute6
     */
    public void setAttribute6(String value) {
        setAttributeInternal(ATTRIBUTE6, value);
    }

    /**Gets the attribute value for Attribute7, using the alias name Attribute7
     */
    public String getAttribute7() {
        return (String)getAttributeInternal(ATTRIBUTE7);
    }

    /**Sets <code>value</code> as the attribute value for Attribute7
     */
    public void setAttribute7(String value) {
        setAttributeInternal(ATTRIBUTE7, value);
    }

    /**Gets the attribute value for Attribute8, using the alias name Attribute8
     */
    public String getAttribute8() {
        return (String)getAttributeInternal(ATTRIBUTE8);
    }

    /**Sets <code>value</code> as the attribute value for Attribute8
     */
    public void setAttribute8(String value) {
        setAttributeInternal(ATTRIBUTE8, value);
    }

    /**Gets the attribute value for Attribute9, using the alias name Attribute9
     */
    public String getAttribute9() {
        return (String)getAttributeInternal(ATTRIBUTE9);
    }

    /**Sets <code>value</code> as the attribute value for Attribute9
     */
    public void setAttribute9(String value) {
        setAttributeInternal(ATTRIBUTE9, value);
    }

    /**Gets the attribute value for Attribute10, using the alias name Attribute10
     */
    public String getAttribute10() {
        return (String)getAttributeInternal(ATTRIBUTE10);
    }

    /**Sets <code>value</code> as the attribute value for Attribute10
     */
    public void setAttribute10(String value) {
        setAttributeInternal(ATTRIBUTE10, value);
    }

    /**Gets the attribute value for Attribute11, using the alias name Attribute11
     */
    public String getAttribute11() {
        return (String)getAttributeInternal(ATTRIBUTE11);
    }

    /**Sets <code>value</code> as the attribute value for Attribute11
     */
    public void setAttribute11(String value) {
        setAttributeInternal(ATTRIBUTE11, value);
    }

    /**Gets the attribute value for Attribute12, using the alias name Attribute12
     */
    public String getAttribute12() {
        return (String)getAttributeInternal(ATTRIBUTE12);
    }

    /**Sets <code>value</code> as the attribute value for Attribute12
     */
    public void setAttribute12(String value) {
        setAttributeInternal(ATTRIBUTE12, value);
    }

    /**Gets the attribute value for Attribute13, using the alias name Attribute13
     */
    public String getAttribute13() {
        return (String)getAttributeInternal(ATTRIBUTE13);
    }

    /**Sets <code>value</code> as the attribute value for Attribute13
     */
    public void setAttribute13(String value) {
        setAttributeInternal(ATTRIBUTE13, value);
    }

    /**Gets the attribute value for Attribute14, using the alias name Attribute14
     */
    public String getAttribute14() {
        return (String)getAttributeInternal(ATTRIBUTE14);
    }

    /**Sets <code>value</code> as the attribute value for Attribute14
     */
    public void setAttribute14(String value) {
        setAttributeInternal(ATTRIBUTE14, value);
    }

    /**Gets the attribute value for Attribute15, using the alias name Attribute15
     */
    public String getAttribute15() {
        return (String)getAttributeInternal(ATTRIBUTE15);
    }

    /**Sets <code>value</code> as the attribute value for Attribute15
     */
    public void setAttribute15(String value) {
        setAttributeInternal(ATTRIBUTE15, value);
    }

    /**Gets the attribute value for CreatedBy, using the alias name CreatedBy
     */
    public Number getCreatedBy() {
        return (Number)getAttributeInternal(CREATEDBY);
    }

    /**Sets <code>value</code> as the attribute value for CreatedBy
     */
    public void setCreatedBy(Number value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**Gets the attribute value for CreationDate, using the alias name CreationDate
     */
    public Date getCreationDate() {
        return (Date)getAttributeInternal(CREATIONDATE);
    }

    /**Sets <code>value</code> as the attribute value for CreationDate
     */
    public void setCreationDate(Date value) {
        setAttributeInternal(CREATIONDATE, value);
    }

    /**Gets the attribute value for LastUpdatedBy, using the alias name LastUpdatedBy
     */
    public Number getLastUpdatedBy() {
        return (Number)getAttributeInternal(LASTUPDATEDBY);
    }

    /**Sets <code>value</code> as the attribute value for LastUpdatedBy
     */
    public void setLastUpdatedBy(Number value) {
        setAttributeInternal(LASTUPDATEDBY, value);
    }

    /**Gets the attribute value for LastUpdateDate, using the alias name LastUpdateDate
     */
    public Date getLastUpdateDate() {
        return (Date)getAttributeInternal(LASTUPDATEDATE);
    }

    /**Sets <code>value</code> as the attribute value for LastUpdateDate
     */
    public void setLastUpdateDate(Date value) {
        setAttributeInternal(LASTUPDATEDATE, value);
    }

    /**Gets the attribute value for LastUpdateLogin, using the alias name LastUpdateLogin
     */
    public Number getLastUpdateLogin() {
        return (Number)getAttributeInternal(LASTUPDATELOGIN);
    }

    /**Sets <code>value</code> as the attribute value for LastUpdateLogin
     */
    public void setLastUpdateLogin(Number value) {
        setAttributeInternal(LASTUPDATELOGIN, value);
    }

    /**getAttrInvokeAccessor: generated method. Do not modify.
     */
    protected Object getAttrInvokeAccessor(int index, 
                                           AttributeDefImpl attrDef) throws Exception {
        switch (index) {
        case APPID:
            return getAppId();
        case APPREFNUMBER:
            return getAppRefNumber();
        case CVRECEIVEDON:
            return getCvReceivedOn();
        case REFERREDBY:
            return getReferredBy();
        case REGION:
            return getRegion();
        case LASTNAME:
            return getLastName();
        case FIRSTNAME:
            return getFirstName();
        case GENDER:
            return getGender();
        case DATEOFBIRTH:
            return getDateOfBirth();
        case ADDRESS1:
            return getAddress1();
        case ADDRESS2:
            return getAddress2();
        case ADDRESS3:
            return getAddress3();
        case ADDRESS4:
            return getAddress4();
        case CITY:
            return getCity();
        case COUNTRY:
            return getCountry();
        case EMAILID:
            return getEmailId();
        case CONTACTNUMBER:
            return getContactNumber();
        case IDNUMBER:
            return getIdNumber();
        case APPSTATUS:
            return getAppStatus();
        case COMMSENT:
            return getCommSent();
        case COMMMODE:
            return getCommMode();
        case REMARKS:
            return getRemarks();
        case ATTRIBUTECATEGORY:
            return getAttributeCategory();
        case ATTRIBUTE1:
            return getAttribute1();
        case ATTRIBUTE2:
            return getAttribute2();
        case ATTRIBUTE3:
            return getAttribute3();
        case ATTRIBUTE4:
            return getAttribute4();
        case ATTRIBUTE5:
            return getAttribute5();
        case ATTRIBUTE6:
            return getAttribute6();
        case ATTRIBUTE7:
            return getAttribute7();
        case ATTRIBUTE8:
            return getAttribute8();
        case ATTRIBUTE9:
            return getAttribute9();
        case ATTRIBUTE10:
            return getAttribute10();
        case ATTRIBUTE11:
            return getAttribute11();
        case ATTRIBUTE12:
            return getAttribute12();
        case ATTRIBUTE13:
            return getAttribute13();
        case ATTRIBUTE14:
            return getAttribute14();
        case ATTRIBUTE15:
            return getAttribute15();
        case CREATEDBY:
            return getCreatedBy();
        case CREATIONDATE:
            return getCreationDate();
        case LASTUPDATEDBY:
            return getLastUpdatedBy();
        case LASTUPDATEDATE:
            return getLastUpdateDate();
        case LASTUPDATELOGIN:
            return getLastUpdateLogin();
        case IDEXPDATE:
            return getIdExpDate();
        case POSITIONAPPFOR:
            return getPositionAppFor();
        case CURRSALARY:
            return getCurrSalary();
        case EXPSALARY:
            return getExpSalary();
        case MEDICALDONEYN:
            return getMedicalDoneYn();
        case ROPCONDUCTCERTYN:
            return getRopConductCertYn();
        case EMPLOYEENUMBER:
            return getEmployeeNumber();
        case REFERREDBYNAME:
            return getReferredByName();
        case EDUEO:
            return getEduEO();
        case EXPEO:
            return getExpEO();
        case INTEREO:
            return getInterEO();
        case PANELEO:
            return getPanelEO();
        default:
            return super.getAttrInvokeAccessor(index, attrDef);
        }
    }

    /**setAttrInvokeAccessor: generated method. Do not modify.
     */
    protected void setAttrInvokeAccessor(int index, Object value, 
                                         AttributeDefImpl attrDef) throws Exception {
        switch (index) {
        case APPID:
            setAppId((Number)value);
            return;
        case APPREFNUMBER:
            setAppRefNumber((String)value);
            return;
        case CVRECEIVEDON:
            setCvReceivedOn((Date)value);
            return;
        case REFERREDBY:
            setReferredBy((String)value);
            return;
        case REGION:
            setRegion((String)value);
            return;
        case LASTNAME:
            setLastName((String)value);
            return;
        case FIRSTNAME:
            setFirstName((String)value);
            return;
        case GENDER:
            setGender((String)value);
            return;
        case DATEOFBIRTH:
            setDateOfBirth((Date)value);
            return;
        case ADDRESS1:
            setAddress1((String)value);
            return;
        case ADDRESS2:
            setAddress2((String)value);
            return;
        case ADDRESS3:
            setAddress3((String)value);
            return;
        case ADDRESS4:
            setAddress4((String)value);
            return;
        case CITY:
            setCity((String)value);
            return;
        case COUNTRY:
            setCountry((String)value);
            return;
        case EMAILID:
            setEmailId((String)value);
            return;
        case CONTACTNUMBER:
            setContactNumber((String)value);
            return;
        case IDNUMBER:
            setIdNumber((String)value);
            return;
        case APPSTATUS:
            setAppStatus((String)value);
            return;
        case COMMSENT:
            setCommSent((String)value);
            return;
        case COMMMODE:
            setCommMode((String)value);
            return;
        case REMARKS:
            setRemarks((String)value);
            return;
        case ATTRIBUTECATEGORY:
            setAttributeCategory((String)value);
            return;
        case ATTRIBUTE1:
            setAttribute1((String)value);
            return;
        case ATTRIBUTE2:
            setAttribute2((String)value);
            return;
        case ATTRIBUTE3:
            setAttribute3((String)value);
            return;
        case ATTRIBUTE4:
            setAttribute4((String)value);
            return;
        case ATTRIBUTE5:
            setAttribute5((String)value);
            return;
        case ATTRIBUTE6:
            setAttribute6((String)value);
            return;
        case ATTRIBUTE7:
            setAttribute7((String)value);
            return;
        case ATTRIBUTE8:
            setAttribute8((String)value);
            return;
        case ATTRIBUTE9:
            setAttribute9((String)value);
            return;
        case ATTRIBUTE10:
            setAttribute10((String)value);
            return;
        case ATTRIBUTE11:
            setAttribute11((String)value);
            return;
        case ATTRIBUTE12:
            setAttribute12((String)value);
            return;
        case ATTRIBUTE13:
            setAttribute13((String)value);
            return;
        case ATTRIBUTE14:
            setAttribute14((String)value);
            return;
        case ATTRIBUTE15:
            setAttribute15((String)value);
            return;
        case CREATEDBY:
            setCreatedBy((Number)value);
            return;
        case CREATIONDATE:
            setCreationDate((Date)value);
            return;
        case LASTUPDATEDBY:
            setLastUpdatedBy((Number)value);
            return;
        case LASTUPDATEDATE:
            setLastUpdateDate((Date)value);
            return;
        case LASTUPDATELOGIN:
            setLastUpdateLogin((Number)value);
            return;
        case IDEXPDATE:
            setIdExpDate((Date)value);
            return;
        case POSITIONAPPFOR:
            setPositionAppFor((String)value);
            return;
        case CURRSALARY:
            setCurrSalary((String)value);
            return;
        case EXPSALARY:
            setExpSalary((String)value);
            return;
        case MEDICALDONEYN:
            setMedicalDoneYn((String)value);
            return;
        case ROPCONDUCTCERTYN:
            setRopConductCertYn((String)value);
            return;
        case EMPLOYEENUMBER:
            setEmployeeNumber((String)value);
            return;
        case REFERREDBYNAME:
            setReferredByName((String)value);
            return;
        default:
            super.setAttrInvokeAccessor(index, value, attrDef);
            return;
        }
    }

    /**Gets the associated entity oracle.jbo.RowIterator
     */
    public RowIterator getEduEO() {
        return (RowIterator)getAttributeInternal(EDUEO);
    }

    /**Gets the associated entity oracle.jbo.RowIterator
     */
    public RowIterator getExpEO() {
        return (RowIterator)getAttributeInternal(EXPEO);
    }

    /**Gets the associated entity oracle.jbo.RowIterator
     */
    public RowIterator getInterEO() {
        return (RowIterator)getAttributeInternal(INTEREO);
    }

    /**Gets the associated entity oracle.jbo.RowIterator
     */
    public RowIterator getPanelEO() {
        return (RowIterator)getAttributeInternal(PANELEO);
    }

    /**Add attribute defaulting logic in this method.
     */
    public void create(AttributeList attributeList) {
         super.create(attributeList);
    }

    /**Add entity remove logic in this method.
     */
    public void remove() {
         super.remove();
    }
    

    /**Add Entity validation code in this method.
     */
    protected void validateEntity() {
        super.validateEntity();

        //Do Validations
        validateAppl() ;

    }


    /**Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**Custom DML update/insert/delete logic here.
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }

    /**Gets the attribute value for IdExpDate, using the alias name IdExpDate
     */
    public Date getIdExpDate() {
        return (Date)getAttributeInternal(IDEXPDATE);
    }

    /**Sets <code>value</code> as the attribute value for IdExpDate
     */
    public void setIdExpDate(Date value) {
        setAttributeInternal(IDEXPDATE, value);
    }

    /**Gets the attribute value for PositionAppFor, using the alias name PositionAppFor
     */
    public String getPositionAppFor() {
        return (String)getAttributeInternal(POSITIONAPPFOR);
    }

    /**Sets <code>value</code> as the attribute value for PositionAppFor
     */
    public void setPositionAppFor(String value) {
        setAttributeInternal(POSITIONAPPFOR, value);
    }

    /**Gets the attribute value for CurrSalary, using the alias name CurrSalary
     */
    public String getCurrSalary() {
        return (String)getAttributeInternal(CURRSALARY);
    }

    /**Sets <code>value</code> as the attribute value for CurrSalary
     */
    public void setCurrSalary(String value) {
        setAttributeInternal(CURRSALARY, value);
    }

    /**Gets the attribute value for ExpSalary, using the alias name ExpSalary
     */
    public String getExpSalary() {
        return (String)getAttributeInternal(EXPSALARY);
    }

    /**Sets <code>value</code> as the attribute value for ExpSalary
     */
    public void setExpSalary(String value) {
        setAttributeInternal(EXPSALARY, value);
    }

    /**Gets the attribute value for MedicalDoneYn, using the alias name MedicalDoneYn
     */
    public String getMedicalDoneYn() {
        return (String)getAttributeInternal(MEDICALDONEYN);
    }

    /**Sets <code>value</code> as the attribute value for MedicalDoneYn
     */
    public void setMedicalDoneYn(String value) {
        setAttributeInternal(MEDICALDONEYN, value);
    }

    /**Gets the attribute value for RopConductCertYn, using the alias name RopConductCertYn
     */
    public String getRopConductCertYn() {
        return (String)getAttributeInternal(ROPCONDUCTCERTYN);
    }

    /**Sets <code>value</code> as the attribute value for RopConductCertYn
     */
    public void setRopConductCertYn(String value) {
        setAttributeInternal(ROPCONDUCTCERTYN, value);
    }

    /**Gets the attribute value for EmployeeNumber, using the alias name EmployeeNumber
     */
    public String getEmployeeNumber() {
        return (String)getAttributeInternal(EMPLOYEENUMBER);
    }

    /**Sets <code>value</code> as the attribute value for EmployeeNumber
     */
    public void setEmployeeNumber(String value) {
        setAttributeInternal(EMPLOYEENUMBER, value);
    }


    /**
     *  Custom Methods are below
     *  ========================
     */
    static final long ONE_HOUR = 60 * 60 * 1000L;
    
    /*** All Validation related to Applicant EO
     */
    public void validateAppl() {

        System.out.println("at validateAppl()" );
        CommonClass cc = new CommonClass() ;
        OADBTransaction txn = (OADBTransaction)getOADBTransaction();

        //long sysDate =  txn.getCurrentDBDate().dateValue().getTime();
        //long dob = getDateOfBirth().dateValue().getTime();
        //long age = ((sysDate - dob + ONE_HOUR) / (ONE_HOUR * 24)) / 365 ;
        
       // Date sysDate = (Date) txn.getCurrentDBDate().dateValue() ;
        //Date dob = (Date) cc.nvl(getDateOfBirth(), sysDate).dateValue() ;
        
        String errcode = "0" ;
        String errmsg  = "" ;
        String callStr = "";
        
        ArrayList ErrList = new ArrayList() ;
        
        /*** Vaidate CV Referred By 
         System.out.println(" Validate Referred By " + getReferredBy());
        if (getReferredBy() != null && !cc.validatePattern(getReferredBy(), cc.ALPHA_ALL)) {
            ErrList.add(new OAException("CV Referred By : Invalid Pattern, Please Enter only Alphabets...", OAException.ERROR));
        }
         ***/
         
        /*** Vaidate Date Received ***/
        System.out.println(" Validate dateCvReceived : " + getCvReceivedOn().dateValue() );
        if (cc.isGtSysdate(getCvReceivedOn().dateValue())) {
            ErrList.add(new OAException("CV Received On : Should be Less than or Equal to Current Date...", OAException.ERROR)) ;
        }

        /*** Vaidate Last Name ***/
         System.out.println(" Last Name " + getLastName());
        if (getLastName() != null && !cc.validatePattern(getLastName(), cc.ALPHA_ALL)) {
            ErrList.add(new OAException("Last Name : Invalid Pattern, Please Enter only Alphabets...", OAException.ERROR));
        }

        /*** Vaidate First Name ***/
         System.out.println(" Last Name " + getFirstName());
        if (getFirstName() != null && !cc.validatePattern(getFirstName(), cc.ALPHA_ALL)) {
            ErrList.add(new OAException("First Name : Invalid Pattern, Please Enter only Alphabets...", OAException.ERROR));
        }

        /*** Vaidate Date of Birth ***/
         System.out.println(" Validate DOB " );
         if (getDateOfBirth() != null ) {
             if (cc.isGtSysdate(getDateOfBirth().dateValue())) {
                 ErrList.add (new OAException("Date of Birth : Should be Less than or Equal to Current Date...", OAException.ERROR));
             }        
            
             // long age = cc.daysBetween(cc.nvl(getDateOfBirth(), txn.getCurrentDBDate()).dateValue(), txn.getCurrentDBDate().dateValue()) / 365 ;
             long age = cc.daysBetween(getDateOfBirth().dateValue(), txn.getCurrentDBDate().dateValue()) / 365 ;
            
             System.out.println(" Validate DOB Age - " + age );
             if (age < 17 || age > 60) {
                 ErrList.add(new OAException("Date of Birth : Age should be between 17 and 60 for applying a job...", OAException.ERROR));
             }
         }
         
        /*** Vaidate Email Address Format ***/
         System.out.println(" Validate emailid " + getEmailId());
        if (getEmailId() != null && !cc.validatePattern(getEmailId(), cc.EMAIL_PATTERN)) {
            ErrList.add(new OAException("Email ID : Invalid Email Format...", OAException.ERROR));
        }

        /*** Vaidate ID Reference Format ***/
         System.out.println("Validate ID Ref " + getIdNumber());      
        if (getIdNumber() != null && !cc.validatePattern(getIdNumber(), cc.ID_PATTERN)) {
            ErrList.add(new OAException("ID Number : Invalid Pattern.  Special Characters are not allowed...", OAException.ERROR));
        }
        
       // if (getEntityState() == 0 ) {
             errcode = "0" ;
             errmsg  = "" ;
             callStr = "{ call XXHLP_RECRUITMENT_PKG.CHK_FOR_DUP_ID_NUM(:1, :2, :3, :4) }";
             try{
                 OracleCallableStatement cs = (OracleCallableStatement)getOADBTransaction().createCallableStatement(callStr, 1);
                 cs.setString(1, getIdNumber());
                 cs.setString(2, getAppId().toString());
                 cs.registerOutParameter(3, Types.VARCHAR);
                 cs.registerOutParameter(4, Types.VARCHAR);
                 cs.execute();
                 
                 errcode = cs.getString(3) ;
                 errmsg  = cs.getString(4) ;
                 cs.close();
             } 
             catch (SQLException sqle){
                      throw OAException.wrapperException(sqle);
             }
             catch (OAException e){
                      throw OAException.wrapperException(e);
             }    
             if (!errcode.equals("0")) {
                 ErrList.add(new OAException("ID Number : " + errmsg, OAException.ERROR));
                 // throw new OAException (errmsg, OAException.ERROR);
             }
       // }

        /*** Vaidate Contact Number ***/
         System.out.println("Validate Contact Num " + getContactNumber());      
        if (getContactNumber() != null && !cc.validatePattern(getContactNumber(), cc.PHONE_PATTERN)) {
            ErrList.add(new OAException("Contact Number : Invalid Pattern.  Special Characters are not allowed...", OAException.ERROR));
        }

        /*** Vaidate Status ***/
        System.out.println("Validate Status " + getAppStatus());      
        if (getAppStatus() != null && !"".equals(getAppStatus())) {
           if ("REC".equals(getAppStatus()) && ( "N".equals(getMedicalDoneYn()) || "N".equals(getRopConductCertYn())) ) {
               ErrList.add(new OAException("Status : Cannot change status to Recruited as Medical and ROP Conduct Certificates not Received... Please Check", OAException.ERROR));
           }
        }

        /*** Vaidate Employee Number ***/
         System.out.println("Validate Employee Number " + getEmployeeNumber());      
        if (getEmployeeNumber() != null) {

           //System.out.println("emp 1 check pattern");
            if (!cc.validatePattern(getEmployeeNumber(), cc.NUMBER_ONLY)) {
               ErrList.add(new OAException("Employee Number : Invalid Pattern.  Please enter only numbers...", OAException.ERROR));
            }

           //System.out.println("emp 2 - check status");
            if (!"REC".equals(getAppStatus())) {
                ErrList.add(new OAException("Employee Number : Can be assigned only if the applicant is Recruited.  Please change the Status...", OAException.ERROR));
            }


           //System.out.println("emp 3 check dup");
           // if (getEntityState() == STATUS_NEW ) {
                 errcode = "0" ;
                 errmsg  = "" ;
                 callStr = "{ call XXHLP_RECRUITMENT_PKG.CHK_FOR_DUP_EMP_NUM(:1, :2, :3, :4) }";
                 try{
                     OracleCallableStatement cs = (OracleCallableStatement)getOADBTransaction().createCallableStatement(callStr, 1);
                     cs.setString(1, getEmployeeNumber());
                     cs.setString(2, getAppId().toString());
                     cs.registerOutParameter(3, Types.VARCHAR);
                     cs.registerOutParameter(4, Types.VARCHAR);
                     cs.execute();
                     
                     errcode = cs.getString(3) ;
                     errmsg  = cs.getString(4) ;
                     cs.close();
                 } 
                 catch (SQLException sqle){
                          throw OAException.wrapperException(sqle);
                 }
                 catch (OAException e){
                          throw OAException.wrapperException(e);
                 }    
                 if (!errcode.equals("0")) {
                     ErrList.add(new OAException("Employee Number : " + errmsg, OAException.ERROR));
                 }
           // }
        } // Employee Number


        
        /**
         * Display All Error
         */
        if (ErrList.size()> 0) {
           OAException.raiseBundledOAException(ErrList);
        }


    } // end of validateAppl()


    /**Gets the attribute value for ReferredByName, using the alias name ReferredByName
     */
    public String getReferredByName() {
        return (String)getAttributeInternal(REFERREDBYNAME);
    }

    /**Sets <code>value</code> as the attribute value for ReferredByName
     */
    public void setReferredByName(String value) {
        setAttributeInternal(REFERREDBYNAME, value);
    }

    /**Creates a Key object based on given key constituents
     */
    public static Key createPrimaryKey(Number appId) {
        return new Key(new Object[]{appId});
    }
}
